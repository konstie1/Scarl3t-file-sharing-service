const TelegramBot = require('node-telegram-bot-api');
const config = require('./config.json');
const fs = require('fs');
const timeout = require('./timeout.json');

function savedbtimeout() {
  fs.writeFile('./timeout.json', JSON.stringify(timeout), (err) => {
    if (err) console.log(err);
  });
}

function timeRestoy(time) {
  let send = 0;

  let cheeeyear = time / (60 * 60 * 24 * 7 * 30 * 12);
  let year = Math.floor(cheeeyear);

  let cheeemonth = time / (60 * 60 * 24 * 7 * 30);
  let month = Math.floor(cheeemonth);

  let cheeeweek = time / (60 * 60 * 24 * 7);
  let week = Math.floor(cheeeweek);

  let cheeeday = time / (60 * 60 * 24);
  let day = Math.floor(cheeeday);

  let cheeehas = time / (60 * 60);
  let sendkolhas = cheeehas - Math.floor(cheeehas / 24) * 24;
  let hass = Math.floor(sendkolhas);

  let cheee = time / 60;
  let min = Math.floor(cheee);
  let sec = (cheee - min) * 60;
  sec = Math.abs(sec);
  sec = Math.floor(sec);
  let cheee2 = min / 60;

  let has = Math.floor(cheee2);
  min = (cheee2 - has) * 60;
  min = Math.floor(min);

  if (time < 60 * 60 * 24 * 7 * 30 * 12)
    send = `*${month};* –º—Å.*${Math.floor(week - (month * 30) / 7)};* –Ω–¥.`;
  if (time < 60 * 60 * 24 * 7 * 30)
    send = `*${week};* –Ω–¥. *${Math.floor(day - week * 7)};* –¥–Ω.`;
  if (time < 60 * 60 * 24 * 7) send = `*${day};* –¥–Ω. *${hass};* —á–∞—Å.`;
  if (time < 60 * 60 * 24) send = `*${has};* —á–∞—Å. *${min};* –º–∏–º.`;
  if (time < 60 * 60) send = `*${min};* –º–∏–Ω. *${sec};* —Å–µ–∫.`;
  if (time < 60) send = `*${sec};* —Å–µ–∫.`;

  return send;
}

try {
	const bot = new TelegramBot(config.token, { polling: true });

	bot.on('message', async (msg) => {
		if (!timeout[msg.chat.id]) {
		timeout[msg.chat.id] = {
			timeout: 0
		};
		savedbtimeout();
		}

		if (msg.text) {
		var content = msg.text;
		var contentediting = content.substr(0, 1);
		if (contentediting === "/") {
			var command = config.command;
			var contentcommand = content.replace("/", "");
			if (!command.includes(contentcommand)) {
			if (
				msg.chat.type === 'supergroup' ||
				msg.chat.type === 'group'
			) {
				return;
			}
			const captionText = `*–ü—Ä–∏–≤–µ—Ç!* üòä –Ø –±–æ—Ç *–ø–æ–¥–¥–µ—Ä–∂–∫–∏*, –≥–æ—Ç–æ–≤—ã–π *–ø–æ–º–æ—á—å —Ç–µ–±–µ* –≤ —Ä–∞–±–æ—Ç–µ. –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ *–≤–æ–ø—Ä–æ—Å—ã* –∏–ª–∏ *–ø—Ä–æ–±–ª–µ–º—ã*, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ *—Å–æ–æ–±—â–µ–Ω–∏–µ* –≤ —ç—Ç–æ—Ç —á–∞—Ç. –Ø *–ø–æ—Å—Ç–∞—Ä–∞—é—Å—å* –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ *–º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ*.\n\n–û–±—Ä–∞—Ç–∏ *–≤–Ω–∏–º–∞–Ω–∏–µ*, —á—Ç–æ —É –Ω–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω *—Ç–∞–π–º–∞—É—Ç*, –≤—ã –º–æ–∂–µ—Ç–µ *–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å* —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑ –≤ *15 –º–∏–Ω—É—Ç*. ‚è∞ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å *–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π* –∏ *–ø–æ–ª–µ–∑–Ω—ã–π* –æ—Ç–≤–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å *–º–∞–∫—Å–∏–º—É–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏* –æ —Å–≤–æ–µ–π –ø—Ä–æ–±–ª–µ–º–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–µ.\n\n –ß–µ–º *–±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π* —Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—à—å, —Ç–µ–º –ª—É—á—à–µ *—è —Å–º–æ–≥—É* –ø–æ–º–æ—á—å. –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è *–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å* –∫–∞–∫–∏–µ-–ª–∏–±–æ *—Ñ–∞–π–ª—ã* –∏–ª–∏ *—Å–∫—Ä–∏–Ω—à–æ—Ç—ã*, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è *–æ—Ç–ø—Ä–∞–≤–∏—Ç—å* –∏—Ö –≤–º–µ—Å—Ç–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –Ø –≥–æ—Ç–æ–≤ *–ø–æ–º–æ—á—å* —Ç–µ–±–µ, —Ç–∞–∫ —á—Ç–æ *–Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è* –æ–±—Ä–∞—â–∞—Ç—å—Å—è! üòâ`;
			await bot.sendMessage(
				msg.chat.id,
				`ü§î –Ø *–Ω–µ –º–æ–≥—É* –Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É ${content};`,
				{ parse_mode: "Markdown" }
			);
			await bot.sendPhoto(
				msg.chat.id,
				"https://media.discordapp.net/attachments/1088507989956231188/1114614330005131405/Frame_14.png?width=1440&height=555",
				{ caption: captionText, parse_mode: "Markdown" }
			);
			return;
			}
		}
		if (contentediting === "/") return;
		}
		try {
		if (msg.chat.type === 'private') {
			const comandtimes = Date.now() / 1000;
			const lerindtime = Math.floor(
			timeout[msg.chat.id].timeout - comandtimes
			);
			if (timeout[msg.chat.id].timeout - comandtimes > 0) {
			return await bot.sendMessage(
				msg.chat.id,
				`üôÅ *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é* —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –í—ã *—Å–º–æ–∂–µ—Ç–µ* –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ ${timeRestoy(
				lerindtime
				)};`,
				{ parse_mode: "Markdown" }
			);
			}
			timeout[msg.chat.id].timeout = comandtimes;
			timeout[msg.chat.id].timeout += 15 * 60;
			savedbtimeout();
			const forwardedMsg = await bot.forwardMessage(
			config.groupId,
			msg.chat.id,
			msg.message_id
			);
			await bot.sendMessage(
			msg.chat.id,
			`üòä –í–∞—à *–∑–∞–ø—Ä–æ—Å* –±—ã–ª *—É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω*, –æ–∂–∏–¥–∞–π—Ç–µ!`,
			{
				parse_mode: "Markdown",
				reply_to_message_id: msg.message_id
			}
			);
			const ownerId = msg.from.id;

			await bot.sendMessage(
			forwardedMsg.chat.id,
			`‚ùï <b>–°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ</b> –ø—Ä–∏—Å–ª–∞–ª <a href="tg://user?id=${ownerId}">${ownerId}</a>`,
			{ parse_mode: "HTML", reply_to_message_id: forwardedMsg.message_id }
			);
		} else {
			const forwardedMsg = await bot.forwardMessage(
			config.groupId,
			msg.chat.id,
			msg.message_id
			);
			await bot.sendMessage(
			msg.chat.id,
			`üòä –í–∞—à *–∑–∞–ø—Ä–æ—Å* –±—ã–ª *—É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω*, –æ–∂–∏–¥–∞–π—Ç–µ!`,
			{
				parse_mode: "Markdown",
				reply_to_message_id: msg.message_id
			}
			);
			const ownerId = msg.from.id;

			await bot.sendMessage(
			forwardedMsg.chat.id,
			`‚ùï <b>–°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ</b> –ø—Ä–∏—Å–ª–∞–ª <a href="tg://user?id=${ownerId}">${ownerId}</a>`,
			{ parse_mode: "HTML", reply_to_message_id: forwardedMsg.message_id }
			);
		}
		} catch (e) {
		console.log(e);
		}
	});

	bot.onText(/\/start/, async (msg) => {
		if (msg.chat.type === 'supergroup' || msg.chat.type === 'group') return bot.sendMessage(msg.chat.id, "‚õî *–û—à–∏–±–∫–∞*! –ö–æ–º–∞–Ω–¥—ã *—Ä–∞–±–æ—Ç–∞—é—Ç* —Ç–æ–ª—å–∫–æ –≤ *–õ–°*.", { reply_to_message_id: msg.message_id, parse_mode: "Markdown" });
		const chatId = msg.chat.id;
		const username = msg.from.username;
		const dateAdded = Date.now();

		const inlineKeyboard = {
			inline_keyboard: [
				[
					{
						text: 'ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç',
						url: 'https://t.me/Scarl3t_bot',
					},
				],
			],
		};
		const captionText = `*–ü—Ä–∏–≤–µ—Ç!* üòä –Ø –±–æ—Ç *–ø–æ–¥–¥–µ—Ä–∂–∫–∏*, –≥–æ—Ç–æ–≤—ã–π *–ø–æ–º–æ—á—å —Ç–µ–±–µ* –≤ —Ä–∞–±–æ—Ç–µ. –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ *–≤–æ–ø—Ä–æ—Å—ã* –∏–ª–∏ *–ø—Ä–æ–±–ª–µ–º—ã*, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ *—Å–æ–æ–±—â–µ–Ω–∏–µ* –≤ —ç—Ç–æ—Ç —á–∞—Ç. –Ø *–ø–æ—Å—Ç–∞—Ä–∞—é—Å—å* –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ *–º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ*.\n\n–û–±—Ä–∞—Ç–∏ *–≤–Ω–∏–º–∞–Ω–∏–µ*, —á—Ç–æ —É –Ω–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω *—Ç–∞–π–º–∞—É—Ç*, –≤—ã –º–æ–∂–µ—Ç–µ *–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å* —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑ –≤ *15 –º–∏–Ω—É—Ç*. ‚è∞ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å *–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π* –∏ *–ø–æ–ª–µ–∑–Ω—ã–π* –æ—Ç–≤–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å *–º–∞–∫—Å–∏–º—É–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏* –æ —Å–≤–æ–µ–π –ø—Ä–æ–±–ª–µ–º–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–µ.\n\n –ß–µ–º *–±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π* —Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—à—å, —Ç–µ–º –ª—É—á—à–µ *—è —Å–º–æ–≥—É* –ø–æ–º–æ—á—å. –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è *–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å* –∫–∞–∫–∏–µ-–ª–∏–±–æ *—Ñ–∞–π–ª—ã* –∏–ª–∏ *—Å–∫—Ä–∏–Ω—à–æ—Ç—ã*, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è *–æ—Ç–ø—Ä–∞–≤–∏—Ç—å* –∏—Ö –≤–º–µ—Å—Ç–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –Ø –≥–æ—Ç–æ–≤ *–ø–æ–º–æ—á—å* —Ç–µ–±–µ, —Ç–∞–∫ —á—Ç–æ *–Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è* –æ–±—Ä–∞—â–∞—Ç—å—Å—è! üòâ`;
		await bot.sendMessage(msg.chat.id, `üëã *–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!*`, { parse_mode: 'Markdown' });
		await bot.sendPhoto(chatId, "https://media.discordapp.net/attachments/1088507989956231188/1114614330005131405/Frame_14.png?width=1440&height=555", { caption: captionText, parse_mode: "Markdown", reply_markup: inlineKeyboard });
	
	});
	
	bot.onText(/\/m (.+)/, async (msg, match) => {
	try {
		if (msg.chat.id.toString() === config.groupId) {

		try {
			const targetId = match[1];
			const messageText = match[0].split(' ').slice(2).join(' ');

			if (messageText) {
			await bot.sendMessage(targetId, messageText);

			await bot.sendMessage(msg.chat.id, `üôÇ –°–æ–æ–±—â–µ–Ω–∏–µ *—É—Å–ø–µ—à–Ω–æ* –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!`, { parse_mode: "Markdown", reply_to_message_id: msg.message_id });
			} else {
			await bot.sendMessage(msg.chat.id, '‚õî *–û—à–∏–±–∫–∞*! –í—ã *–Ω–µ —É–∫–∞–∑–∞–ª–∏* —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', { parse_mode: "Markdown" });
			}
		} catch (error) {
			await bot.sendMessage(msg.chat.id, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message};`);
		}
		} else {
		await bot.sendMessage(msg.chat.id, '‚õî *–û—à–∏–±–∫–∞*! –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ *–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞*', { parse_mode: "Markdown" });
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã:', error.message);
	}
	});
	
} catch (e) {
	console.log(e);
}
console.log(`\x1b[32m[START]\x1b[0m –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: \x1b[33mScarlet Support\x1b[0m, —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º Telegram`);